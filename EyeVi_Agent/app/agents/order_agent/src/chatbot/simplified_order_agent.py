"""
Simplified Order Agent v·ªõi LangGraph ƒë∆°n gi·∫£n
Ch·ªâ h·ªó tr·ª£ 5 ch·ª©c nƒÉng c∆° b·∫£n:
1. T√¨m s·∫£n ph·∫©m theo ID
2. T√¨m s·∫£n ph·∫©m theo t√™n  
3. L·∫•y th√¥ng tin user
4. L·∫•y l·ªãch s·ª≠ ƒë∆°n h√†ng
5. T·∫°o ƒë∆°n h√†ng tr·ª±c ti·∫øp
"""

import logging
from typing import Annotated, TypedDict, List, Literal
from langgraph.graph import StateGraph, START, END
from langgraph.graph.message import add_messages
from langchain_core.messages import HumanMessage, AIMessage, BaseMessage, ToolMessage
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_core.tools import tool
import json
from decimal import Decimal
from datetime import datetime, date
from src.database.queries.product import ProductQuery
from src.database.queries.user import UserQuery
from src.database.queries.order import OrderQuery
import os
import re

logger = logging.getLogger(__name__)

# ============ CUSTOM JSON ENCODER ============
class DecimalEncoder(json.JSONEncoder):
    """Custom JSON encoder ƒë·ªÉ x·ª≠ l√Ω Decimal v√† datetime"""
    def default(self, obj):
        if isinstance(obj, Decimal):
            return float(obj)
        elif isinstance(obj, (datetime, date)):
            return obj.isoformat()
        return super(DecimalEncoder, self).default(obj)

def safe_json_dumps(data):
    """Safe JSON dumps with Decimal handling"""
    return json.dumps(data, cls=DecimalEncoder, ensure_ascii=False)

# ============ STATE DEFINITION ============
class SimpleOrderState(TypedDict):
    """State ƒë∆°n gi·∫£n cho order agent"""
    messages: Annotated[List[BaseMessage], add_messages]
    current_user_id: int
    # Th√™m c√°c field cho format response
    products: List[dict]
    orders: List[dict] 
    user_info: dict
    count: int
    search_type: str
    operation_type: str
    llm_response: str
    formatted_response: dict

# ============ SIMPLIFIED TOOLS ============

@tool
def find_product_by_id(product_id: int) -> str:
    """
    Find product by ID
    Args:
        product_id: ID c·ªßa s·∫£n ph·∫©m c·∫ßn t√¨m
    Returns:
        Th√¥ng tin s·∫£n ph·∫©m d·∫°ng string k√®m data JSON
    """
    try:
        logger.info(f"üîç T√¨m s·∫£n ph·∫©m ID: {product_id}")
        product = ProductQuery().get_product_by_id(product_id)
        if not product:
            return f"‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID {product_id}"
        
        # Text hi·ªÉn th·ªã cho user
        display_text = f"""‚úÖ S·∫£n ph·∫©m t√¨m th·∫•y:
üì¶ ID: {product.get('id', 'N/A')}
üè∑Ô∏è T√™n: {product.get('name', 'N/A')}
üí∞ Gi√°: {product.get('price', 'N/A'):,} VND
üìù M√¥ t·∫£: {product.get('description', 'N/A')}
üìä T·ªìn kho: {product.get('stock', 'N/A')} s·∫£n ph·∫©m"""
        
        # Data cho client x·ª≠ l√Ω
        data_dict = {
            "type": "product_detail",
            "data": product
        }
        
        # K·∫øt h·ª£p v·ªõi marker
        return f"{display_text}\n\n[DATA_MARKER]{safe_json_dumps(data_dict)}[/DATA_MARKER]"
        
    except Exception as e:
        logger.error(f"L·ªói t√¨m s·∫£n ph·∫©m ID {product_id}: {e}")
        return f"‚ùå L·ªói: {str(e)}"

@tool
def find_product_by_name(product_name: str) -> str:
    """
    Find products by name
    Args:
        product_name: T√™n s·∫£n ph·∫©m c·∫ßn t√¨m
    Returns:
        Danh s√°ch s·∫£n ph·∫©m d·∫°ng string k√®m data JSON
    """
    try:
        logger.info(f"üîç T√¨m s·∫£n ph·∫©m t√™n: {product_name}")
        products = ProductQuery().get_product_by_name(product_name)
        if not products:
            return f"‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o c√≥ t√™n ch·ª©a '{product_name}'"
        
        # Text hi·ªÉn th·ªã cho user
        result = f"‚úÖ T√¨m th·∫•y {len(products)} s·∫£n ph·∫©m:\n"
        for i, product in enumerate(products[:5], 1):  # Gi·ªõi h·∫°n 5 s·∫£n ph·∫©m
            result += f"\n{i}. üì¶ ID: {product.get('id')} | {product.get('name')} | üí∞ {product.get('price', 0):,} VND"
        if len(products) > 5:
            result += f"\n... v√† {len(products) - 5} s·∫£n ph·∫©m kh√°c"
        
        # Data cho client x·ª≠ l√Ω
        data_dict = {
            "type": "product_list",
            "data": products[:5],  # Gi·ªõi h·∫°n 5 s·∫£n ph·∫©m
            "total_count": len(products),
            "search_term": product_name
        }
        
        # K·∫øt h·ª£p v·ªõi marker
        return f"{result}\n\n[DATA_MARKER]{safe_json_dumps(data_dict)}[/DATA_MARKER]"
        
    except Exception as e:
        logger.error(f"L·ªói t√¨m s·∫£n ph·∫©m t√™n '{product_name}': {e}")
        return f"‚ùå L·ªói: {str(e)}"

@tool
def get_user_info(user_id: int) -> str:
    """
    Get user information by ID
    Args:
        user_id: ID ng∆∞·ªùi d√πng c·∫ßn l·∫•y th√¥ng tin
    Returns:
        Th√¥ng tin ng∆∞·ªùi d√πng d·∫°ng string k√®m data JSON
    """
    try:
        logger.info(f"üë§ L·∫•y th√¥ng tin user ID: {user_id}")
        user = UserQuery().get_user_by_id(user_id)
        if not user:
            return f"‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID {user_id}"
        
        # Text hi·ªÉn th·ªã cho user
        display_text = f"""‚úÖ Th√¥ng tin ng∆∞·ªùi d√πng:
üë§ ID: {user.get('id', 'N/A')}
üìõ T√™n: {user.get('name', 'N/A')}
üìß Email: {user.get('email', 'N/A')}
üìû ƒêi·ªán tho·∫°i: {user.get('phone', 'Ch∆∞a c·∫≠p nh·∫≠t')}
üè† ƒê·ªãa ch·ªâ: {user.get('address', 'Ch∆∞a c·∫≠p nh·∫≠t')}"""
        
        # Data cho client x·ª≠ l√Ω
        data_dict = {
            "type": "user_info",
            "data": user
        }
        
        # K·∫øt h·ª£p v·ªõi marker
        return f"{display_text}\n\n[DATA_MARKER]{safe_json_dumps(data_dict)}[/DATA_MARKER]"
        
    except Exception as e:
        logger.error(f"L·ªói l·∫•y th√¥ng tin user {user_id}: {e}")
        return f"‚ùå L·ªói: {str(e)}"

@tool
def get_user_orders(user_id: int, limit: int = 5) -> str:
    """
    Get user order history
    Args:
        user_id: ID ng∆∞·ªùi d√πng
        limit: S·ªë l∆∞·ª£ng ƒë∆°n h√†ng t·ªëi ƒëa (m·∫∑c ƒë·ªãnh 5)
    Returns:
        L·ªãch s·ª≠ ƒë∆°n h√†ng d·∫°ng string k√®m data JSON
    """
    try:
        logger.info(f"üìã L·∫•y l·ªãch s·ª≠ ƒë∆°n h√†ng user ID: {user_id}")
        orders = OrderQuery().get_orders_by_user_id(user_id, limit)
        if not orders:
            return f"‚ùå Ng∆∞·ªùi d√πng ID {user_id} ch∆∞a c√≥ ƒë∆°n h√†ng n√†o"
        
        # Text hi·ªÉn th·ªã cho user
        result = f"‚úÖ L·ªãch s·ª≠ {len(orders)} ƒë∆°n h√†ng g·∫ßn nh·∫•t:\n"
        for i, order in enumerate(orders, 1):
            result += f"""
{i}. üÜî ƒê∆°n #{order.get('id')} | üí∞ {order.get('total_price', 0):,} VND
   üì¶ {order.get('total_items', 0)} s·∫£n ph·∫©m | üìä {order.get('order_status', 'N/A')}
   üí≥ {order.get('payment', 'COD')} | üìÖ {order.get('created_at', 'N/A')}"""
        
        # Data cho client x·ª≠ l√Ω
        data_dict = {
            "type": "order_history",
            "data": orders,
            "user_id": user_id,
            "limit": limit
        }
        
        # K·∫øt h·ª£p v·ªõi marker
        return f"{result}\n\n[DATA_MARKER]{safe_json_dumps(data_dict)}[/DATA_MARKER]"
        
    except Exception as e:
        logger.error(f"L·ªói l·∫•y l·ªãch s·ª≠ ƒë∆°n h√†ng user {user_id}: {e}")
        return f"‚ùå L·ªói: {str(e)}"

@tool
def collect_order_info(user_id: int, product_items: str) -> str:
    """
    Thu th·∫≠p th√¥ng tin c·∫ßn thi·∫øt ƒë·ªÉ t·∫°o ƒë∆°n h√†ng (b∆∞·ªõc 1)
    Args:
        user_id: ID ng∆∞·ªùi d√πng
        product_items: Danh s√°ch s·∫£n ph·∫©m d·∫°ng JSON string: [{"product_id": 1, "quantity": 2}, ...]
    Returns:
        Th√¥ng tin s·∫£n ph·∫©m v√† y√™u c·∫ßu th√¥ng tin giao h√†ng
    """
    try:
        logger.info(f"üìã Thu th·∫≠p th√¥ng tin ƒë·∫∑t h√†ng cho user {user_id}")
        
        # Parse danh s√°ch s·∫£n ph·∫©m
        try:
            items = json.loads(product_items)
        except json.JSONDecodeError:
            return "‚ùå Danh s√°ch s·∫£n ph·∫©m kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng JSON"
        if not items:
            return "‚ùå Danh s√°ch s·∫£n ph·∫©m tr·ªëng!"
        
        # Ki·ªÉm tra th√¥ng tin s·∫£n ph·∫©m v√† t·ªìn kho
        product_query = ProductQuery()
        order_summary = "üìã **X√ÅC NH·∫¨N ƒê∆†N H√ÄNG:**\n\n"
        total_estimated = 0
        validated_items = []
        
        for item in items:
            product_id = item.get('product_id')
            quantity = item.get('quantity', 1)
            
            # Query th√¥ng tin s·∫£n ph·∫©m
            product = product_query.get_product_by_id(product_id)
            if not product:
                return f"‚ùå S·∫£n ph·∫©m ID {product_id} kh√¥ng t·ªìn t·∫°i!"
            
            # Ki·ªÉm tra t·ªìn kho
            stock = product.get('stock', 0)
            if stock < quantity:
                return f"‚ùå S·∫£n ph·∫©m '{product.get('name')}' ch·ªâ c√≤n {stock} s·∫£n ph·∫©m, kh√¥ng ƒë·ªß cho s·ªë l∆∞·ª£ng {quantity}!"
             
            # T√≠nh ti·ªÅn
            price = product.get('newPrice', 0)
            subtotal = price * quantity
            total_estimated += subtotal
            validated_items.append(item)
            
            # Th√™m v√†o summary
            order_summary += f"üì¶ {product.get('name')}\n"
            order_summary += f"   üí∞ {price:,} VND x {quantity} = {subtotal:,} VND\n"
            order_summary += f"   üìä T·ªìn kho: {stock} s·∫£n ph·∫©m\n\n"
        
        order_summary += f"üí∞ **T·ªîNG TI·ªÄN: {total_estimated:,} VND**\n\n"
        
        # Y√™u c·∫ßu th√¥ng tin giao h√†ng
        order_summary += """üö® **C·∫¶N TH√îNG TIN GIAO H√ÄNG:**

ƒê·ªÉ ho√†n t·∫•t ƒë∆°n h√†ng, vui l√≤ng cung c·∫•p:
üìç **ƒê·ªãa ch·ªâ giao h√†ng**: V√≠ d·ª•: "123 Nguy·ªÖn Tr√£i, Qu·∫≠n 1, TP.HCM"
üìû **S·ªë ƒëi·ªán tho·∫°i**: V√≠ d·ª•: "0901234567"
üí≥ **H√¨nh th·ª©c thanh to√°n**: 
   - "COD" (Thanh to√°n khi nh·∫≠n h√†ng)
   - "Banking" (Chuy·ªÉn kho·∫£n ng√¢n h√†ng)

üìù **V√≠ d·ª• tr·∫£ l·ªùi:** "Giao ƒë·∫øn 123 Nguy·ªÖn Tr√£i, TP.HCM, s·ªë ƒëi·ªán tho·∫°i 0901234567, thanh to√°n COD"
"""
        
        # Data cho client x·ª≠ l√Ω
        data_dict = {
            "type": "order_info_request",
            "data": {
                "items": validated_items,
                "estimated_total": total_estimated,
                "user_id": user_id,
                "products_info": [product_query.get_product_by_id(item['product_id']) for item in validated_items]
            }
        }
        
        return f"{order_summary}\n\n[DATA_MARKER]{safe_json_dumps(data_dict)}[/DATA_MARKER]"
        
    except Exception as e:
        logger.error(f"L·ªói thu th·∫≠p th√¥ng tin ƒë·∫∑t h√†ng user {user_id}: {e}")
        return f"‚ùå L·ªói: {str(e)}"

@tool
def create_order_directly(user_id: int, product_items: str, shipping_address: str, phone: str, payment_method: str) -> str:
    """
    T·∫°o ƒë∆°n h√†ng v·ªõi th√¥ng tin ƒë·∫ßy ƒë·ªß (b∆∞·ªõc 2 - sau khi ƒë√£ thu th·∫≠p th√¥ng tin)
    Args:
        user_id: ID ng∆∞·ªùi d√πng
        product_items: Danh s√°ch s·∫£n ph·∫©m d·∫°ng JSON string: [{"product_id": 1, "quantity": 2}, ...]
        shipping_address: ƒê·ªãa ch·ªâ giao h√†ng (B·∫ÆT BU·ªòC)
        phone: S·ªë ƒëi·ªán tho·∫°i li√™n l·∫°c (B·∫ÆT BU·ªòC)
        payment_method: Ph∆∞∆°ng th·ª©c thanh to√°n (COD ho·∫∑c Banking - B·∫ÆT BU·ªòC)
    Returns:
        K·∫øt qu·∫£ t·∫°o ƒë∆°n h√†ng d·∫°ng string k√®m data JSON
    """
    try:
        logger.info(f"üõçÔ∏è T·∫°o ƒë∆°n h√†ng v·ªõi th√¥ng tin ƒë·∫ßy ƒë·ªß cho user {user_id}")
        
        # Ki·ªÉm tra th√¥ng tin b·∫Øt bu·ªôc
        if not shipping_address or not shipping_address.strip():
            return "‚ùå Thi·∫øu ƒë·ªãa ch·ªâ giao h√†ng! Vui l√≤ng cung c·∫•p ƒë·ªãa ch·ªâ giao h√†ng."
        
        if not phone or not phone.strip():
            return "‚ùå Thi·∫øu s·ªë ƒëi·ªán tho·∫°i! Vui l√≤ng cung c·∫•p s·ªë ƒëi·ªán tho·∫°i li√™n l·∫°c."
        
        # Ki·ªÉm tra ph∆∞∆°ng th·ª©c thanh to√°n h·ª£p l·ªá
        valid_payment_methods = ["COD", "Banking"]
        if not payment_method or payment_method not in valid_payment_methods:
            return f"‚ùå Ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng h·ª£p l·ªá! Ch·ªâ ch·∫•p nh·∫≠n: {', '.join(valid_payment_methods)}"
        
        # Parse danh s√°ch s·∫£n ph·∫©m
        try:
            items = json.loads(product_items)
        except json.JSONDecodeError:
            return "‚ùå Danh s√°ch s·∫£n ph·∫©m kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng JSON"
        if not items:
            return "‚ùå Danh s√°ch s·∫£n ph·∫©m tr·ªëng!"
        
        # T·∫†O ƒê∆†N H√ÄNG V·ªöI TH√îNG TIN ƒê√É VALIDATE
        logger.info("üõçÔ∏è T·∫°o ƒë∆°n h√†ng v·ªõi th√¥ng tin ƒë·∫ßy ƒë·ªß...")
        order_id = OrderQuery().create_order(
            user_id=user_id,
            items=items,
            shipping_address=shipping_address.strip(),
            phone=phone.strip(),
            payment_method=payment_method
        )
        
        if not order_id:
            return "‚ùå Kh√¥ng th·ªÉ t·∫°o ƒë∆°n h√†ng. Vui l√≤ng th·ª≠ l·∫°i."
        
        # L·∫§Y TH√îNG TIN ƒê∆†N H√ÄNG ƒê√É T·∫†O
        order = OrderQuery().get_order_by_id(order_id)
        
        # T√≠nh t·ªïng ti·ªÅn ƒë·ªÉ hi·ªÉn th·ªã
        total_estimated = sum(item.get('newPrice', 0) * item.get('quantity', 1) for item in order.get('items', []))
        
        # Text hi·ªÉn th·ªã cho user
        display_text = f"""‚úÖ **ƒê∆†N H√ÄNG ƒê∆Ø·ª¢C T·∫†O TH√ÄNH C√îNG!**

üÜî M√£ ƒë∆°n h√†ng: #{order_id}
üí∞ T·ªïng ti·ªÅn: {order.get('total_price', 0):,} VND
üì¶ T·ªïng s·ªë s·∫£n ph·∫©m: {order.get('total_items', 0)}
üöö ƒê·ªãa ch·ªâ giao h√†ng: {order.get('shipping_address', 'N/A')}
üìû S·ªë ƒëi·ªán tho·∫°i: {order.get('phone', 'N/A')}
üí≥ Ph∆∞∆°ng th·ª©c thanh to√°n: {order.get('payment', 'COD')}
üìä Tr·∫°ng th√°i: {order.get('order_status', 'pending')}

üéâ C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t h√†ng! ƒê∆°n h√†ng s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω trong th·ªùi gian s·ªõm nh·∫•t."""
        
        # Data cho client x·ª≠ l√Ω
        data_dict = {
            "type": "order_created",
            "data": {
                "order": order,
                "items": items,
                "estimated_total": total_estimated
            }
        }
        
        # K·∫øt h·ª£p v·ªõi marker
        return f"{display_text}\n\n[DATA_MARKER]{safe_json_dumps(data_dict)}[/DATA_MARKER]"
        
    except Exception as e:
        logger.error(f"L·ªói t·∫°o ƒë∆°n h√†ng cho user {user_id}: {e}")
        return f"‚ùå L·ªói: {str(e)}"
    
@tool
def update_order_info(order_id: int, shipping_address: str, phone: str, payment_method: str) -> str:
    """
    Update order information
    Args:
        order_id: ID ƒë∆°n h√†ng c·∫ßn c·∫≠p nh·∫≠t
        shipping_address: ƒê·ªãa ch·ªâ giao h√†ng m·ªõi
        phone: S·ªë ƒëi·ªán tho·∫°i li√™n l·∫°c m·ªõi
        payment_method: Ph∆∞∆°ng th·ª©c thanh to√°n m·ªõi (COD ho·∫∑c Banking)
    Returns:
        K·∫øt qu·∫£ c·∫≠p nh·∫≠t ƒë∆°n h√†ng d·∫°ng string k√®m data JSON
    """
    try:
        logger.info(f"üîÑ C·∫≠p nh·∫≠t th√¥ng tin ƒë∆°n h√†ng ID: {order_id}")
        
        # Ki·ªÉm tra ph∆∞∆°ng th·ª©c thanh to√°n h·ª£p l·ªá
        valid_payment_methods = ["COD", "Banking"]
        if payment_method not in valid_payment_methods:
            return f"‚ùå Ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng h·ª£p l·ªá! Ch·ªâ ch·∫•p nh·∫≠n: {', '.join(valid_payment_methods)}"
        
        order = OrderQuery().get_order_by_id(order_id)
        if not order:
            return f"‚ùå ƒê∆°n h√†ng ID {order_id} kh√¥ng t·ªìn t·∫°i!"
        
        # C·∫≠p nh·∫≠t th√¥ng tin ƒë∆°n h√†ng
        OrderQuery().update_order(
            order_id=order_id,
            shipping_address=shipping_address,
            phone=phone,    
            payment_method=payment_method
        )
        
        # L·∫•y th√¥ng tin ƒë∆°n h√†ng sau khi c·∫≠p nh·∫≠t
        updated_order = OrderQuery().get_order_by_id(order_id)
        
        # Text hi·ªÉn th·ªã cho user
        display_text = f"""‚úÖ ƒê∆°n h√†ng ID {order_id} ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!

üìã **TH√îNG TIN ƒê∆†N H√ÄNG M·ªöI:**
üÜî M√£ ƒë∆°n h√†ng: #{order_id}
üìä Tr·∫°ng th√°i: {updated_order.get('order_status', 'pending')}
üöö ƒê·ªãa ch·ªâ giao h√†ng: {updated_order.get('shipping_address', 'N/A')}
üìû S·ªë ƒëi·ªán tho·∫°i: {updated_order.get('phone', 'N/A')}
üí≥ Ph∆∞∆°ng th·ª©c thanh to√°n: {updated_order.get('payment', 'COD')}"""
        
        # Data cho client x·ª≠ l√Ω
        data_dict = {
            "type": "order_updated",
            "data": {
                "order_id": order_id,
                "updated_order": updated_order
            }
        }
        
        # K·∫øt h·ª£p v·ªõi marker
        return f"{display_text}\n\n[DATA_MARKER]{safe_json_dumps(data_dict)}[/DATA_MARKER]"
        
    except Exception as e:
        logger.error(f"L·ªói c·∫≠p nh·∫≠t th√¥ng tin ƒë∆°n h√†ng ID {order_id}: {e}")
        return f"‚ùå L·ªói: {str(e)}"

# ============ HELPER FUNCTIONS ============

def parse_agent_response(response: str) -> dict:
    """
    Parse agent response ƒë·ªÉ t√°ch text v√† data
    Args:
        response: Response t·ª´ agent
    Returns:
        Dict ch·ª©a text v√† data
    """
    # T√¨m data marker
    data_pattern = r'\[DATA_MARKER\](.*?)\[/DATA_MARKER\]'
    data_match = re.search(data_pattern, response, re.DOTALL)
    
    if data_match:
        # T√°ch text v√† data
        text_content = response.replace(data_match.group(0), '').strip()
        try:
            data_content = json.loads(data_match.group(1))
        except json.JSONDecodeError:
            data_content = None
        
        return {
            "text": text_content,
            "data": data_content,
            "has_data": True
        }
    else:
        return {
            "text": response,
            "data": None,
            "has_data": False
        }

# ============ SIMPLIFIED LANGGRAPH AGENT ============

class SimplifiedOrderAgent:
    """Agent ƒë∆°n gi·∫£n cho qu·∫£n l√Ω ƒë∆°n h√†ng"""
    
    def __init__(self):
        self.llm = ChatGoogleGenerativeAI(
            model="gemini-2.0-flash", 
            google_api_key=os.getenv("GOOGLE_API_KEY"),
            temperature=0.1
        )
        
        # 6 tools c∆° b·∫£n v·ªõi t√™n chu·∫©n
        self.tools = [
            find_product_by_id, 
            find_product_by_name,
            get_user_info,
            get_user_orders,
            collect_order_info,
            create_order_directly,
            update_order_info
        ]
        self.llm_with_tools = self.llm.bind_tools(self.tools)
        
        # T·∫°o workflow ƒë∆°n gi·∫£n
        self.graph = self._create_simple_graph()
    
    def _create_simple_graph(self) -> StateGraph:
        """T·∫°o workflow LangGraph v·ªõi 3 nodes: assistant, tools, format_response"""
        workflow = StateGraph(SimpleOrderState)
        
        # 3 nodes: assistant, tools, v√† format_response
        workflow.add_node("assistant", self._assistant_node)
        workflow.add_node("tools", self._tools_node)
        workflow.add_node("format_response", self._format_response_node)
        
        # Flow m·ªõi: START ‚Üí assistant ‚Üí tools ‚Üí assistant ‚Üí format_response ‚Üí END
        workflow.add_edge(START, "assistant")
        workflow.add_conditional_edges(
            "assistant",
            self._should_use_tools,
            {
                "tools": "tools",
                "format": "format_response"
            }
        )
        workflow.add_edge("tools", "assistant")
        workflow.add_edge("format_response", END)
        
        return workflow.compile()
    
    def _assistant_node(self, state: SimpleOrderState):
        """Node ch√≠nh x·ª≠ l√Ω chat"""
        messages = state["messages"]
        
        # Th√™m system message ƒë∆°n gi·∫£n
        if not messages or not any(isinstance(msg, AIMessage) for msg in messages):
            system_prompt = """
            B·∫°n l√† tr·ª£ l√Ω ƒë∆°n h√†ng th√¥ng minh. B·∫°n c√≥ th·ªÉ:

üîç T√¨m s·∫£n ph·∫©m theo ID: find_product_by_id(product_id)
üîç T√¨m s·∫£n ph·∫©m theo t√™n: find_product_by_name(product_name)  
üë§ L·∫•y th√¥ng tin user: get_user_info(user_id)
üìã L·∫•y l·ªãch s·ª≠ ƒë∆°n h√†ng: get_user_orders(user_id, limit)
üìù Thu th·∫≠p th√¥ng tin ƒë·∫∑t h√†ng: collect_order_info(user_id, product_items)
üõçÔ∏è T·∫°o ƒë∆°n h√†ng v·ªõi th√¥ng tin ƒë·∫ßy ƒë·ªß: create_order_directly(user_id, product_items, shipping_address, phone, payment_method)
üîÑ C·∫≠p nh·∫≠t th√¥ng tin ƒë∆°n h√†ng: update_order_info(order_id, shipping_address, phone, payment_method)

üìù L∆ØU √ù QUAN TR·ªåNG:
- N·∫øu ng∆∞·ªùi d√πng KH√îNG cung c·∫•p user_id c·ª• th·ªÉ, h√£y s·ª≠ d·ª•ng user_id = 1 l√†m m·∫∑c ƒë·ªãnh
- Khi ng∆∞·ªùi d√πng h·ªèi "th√¥ng tin c·ªßa t√¥i", "ƒë∆°n h√†ng c·ªßa t√¥i" m√† kh√¥ng n√≥i r√µ ID ‚Üí d√πng user_id = 1
- Ch·ªâ khi ng∆∞·ªùi d√πng n√≥i r√µ "user 5", "ng∆∞·ªùi d√πng 10" th√¨ m·ªõi d√πng ID ƒë√≥
- Khi g·ªçi tool, b·∫°n c√≥ th·ªÉ th√™m text b·ªï sung th√¢n thi·ªán tr∆∞·ªõc khi g·ªçi tool

üéØ H∆Ø·ªöNG D·∫™N TR√çCH XU·∫§T TH√îNG TIN T·ª™ USER MESSAGE:

1. üîç T√åMKI·∫æM S·∫¢N PH·∫®M:
   - "s·∫£n ph·∫©m ID 5", "product 10", "sp 15" ‚Üí product_id = s·ªë
   - "t√¨m iPhone", "s·∫£n ph·∫©m t√™n Laptop", "c√≥ Samsung n√†o kh√¥ng" ‚Üí product_name = t√™n
   - "xem s·∫£n ph·∫©m 123" ‚Üí find_product_by_id(123)
   - "t√¨m ƒëi·ªán tho·∫°i" ‚Üí find_product_by_name("ƒëi·ªán tho·∫°i")

2. üë§ TH√îNG TIN USER:
   - "th√¥ng tin t√¥i", "profile c·ªßa t√¥i" ‚Üí get_user_info(1)
   - "user 5", "ng∆∞·ªùi d√πng 10", "kh√°ch h√†ng 15" ‚Üí get_user_info(s·ªë)
   - "t√¥i l√† ai", "t√†i kho·∫£n c·ªßa t√¥i" ‚Üí get_user_info(1)

3. üìã L·ªäCH S·ª¨ ƒê∆†N H√ÄNG:
   - "ƒë∆°n h√†ng c·ªßa t√¥i", "l·ªãch s·ª≠ mua h√†ng" ‚Üí get_user_orders(1)
   - "5 ƒë∆°n h√†ng g·∫ßn nh·∫•t", "10 ƒë∆°n cu·ªëi" ‚Üí get_user_orders(1, s·ªë)
   - "ƒë∆°n h√†ng user 5" ‚Üí get_user_orders(5)

4. üõçÔ∏è T·∫†O ƒê∆†N H√ÄNG (FLOW M·ªöI - 2 B∆Ø·ªöC B·∫ÆT BU·ªòC):
   
   ‚ö†Ô∏è **QUY T·∫ÆC QUAN TR·ªåNG:** M·ªåI ƒê∆†N H√ÄNG ƒê·ªÄU PH·∫¢I H·ªéI TH√îNG TIN ƒê·∫¶Y ƒê·ª¶!
   
   B∆Ø·ªöC 1: collect_order_info(user_id, product_items)
   - Y√äU C·∫¶U user cung c·∫•p: s·ªë l∆∞·ª£ng s·∫£n ph·∫©m, ƒë·ªãa ch·ªâ, s·ªë ƒëi·ªán tho·∫°i, h√¨nh th·ª©c thanh to√°n
   
   B∆Ø·ªöC 2: create_order_directly(user_id, product_items, shipping_address, phone, payment_method) 
   - CH·ªà g·ªçi SAU KHI user ƒë√£ cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin
   - T·∫•t c·∫£ th√¥ng tin ƒë·ªÅu B·∫ÆT BU·ªòC: product_items, shipping_address, phone, payment_method
   - H√¨nh th·ª©c thanh to√°n CH·ªà ch·∫•p nh·∫≠n: "COD" ho·∫∑c "Banking"
      
   V√≠ d·ª• flow ƒë√∫ng:
   User: "ƒë·∫∑t 2 s·∫£n ph·∫©m ID 1"
   ‚Üí G·ªçi collect_order_info(1, '[{"product_id": 1, "quantity": 2}]')
   ‚Üí H·ªá th·ªëng h·ªèi: s·ªë l∆∞·ª£ng s·∫£n ph·∫©m, ƒë·ªãa ch·ªâ, SƒêT, h√¨nh th·ª©c thanh to√°n
   User: "Mua 1 s·∫£n ph·∫©m, giao ƒë·∫øn 123 Nguy·ªÖn Tr√£i, SƒêT 0901234567, thanh to√°n COD"
   ‚Üí G·ªçi create_order_directly(1, '[{"product_id": 1, "quantity": 2}]', "123 Nguy·ªÖn Tr√£i", "0901234567", "COD")

5. üîÑ C·∫¨P NH·∫¨T ƒê∆†N H√ÄNG:
   - "c·∫≠p nh·∫≠t ƒë∆°n 123", "s·ª≠a ƒë∆°n h√†ng 456" ‚Üí order_id = s·ªë
   - "ƒë·ªïi ƒë·ªãa ch·ªâ giao h√†ng" ‚Üí shipping_address = ƒë·ªãa ch·ªâ m·ªõi
   - "c·∫≠p nh·∫≠t s·ªë ƒëi·ªán tho·∫°i" ‚Üí phone = s·ªë m·ªõi
   - "ƒë·ªïi ph∆∞∆°ng th·ª©c thanh to√°n" ‚Üí payment_method = ph∆∞∆°ng th·ª©c m·ªõi

6. üìû TR√çCH XU·∫§T TH√îNG TIN LI√äN H·ªÜ:
   - S·ªë ƒëi·ªán tho·∫°i: 09xx, 08xx, 07xx, 03xx, 05xx + 8 ch·ªØ s·ªë
   - ƒê·ªãa ch·ªâ: "ƒë·∫øn", "giao", "ƒë·ªãa ch·ªâ", "t·∫°i" + th√¥ng tin sau ƒë√≥
   - Ph∆∞∆°ng th·ª©c thanh to√°n CH·ªà 2 LO·∫†I:
     * "COD" (thanh to√°n khi nh·∫≠n h√†ng, ti·ªÅn m·∫∑t) 
     * "Banking" (chuy·ªÉn kho·∫£n ng√¢n h√†ng)

V√≠ d·ª• tr√≠ch xu·∫•t t·ª´ user message:
- "Giao ƒë·∫øn 123 Nguy·ªÖn Tr√£i, SƒêT 0901234567, thanh to√°n COD"
- "ƒê·ªãa ch·ªâ 456 L√™ L·ª£i, phone 0987654321, chuy·ªÉn kho·∫£n" ‚Üí Banking
- "456 Tr·∫ßn H∆∞ng ƒê·∫°o, 0912345678, COD"

H∆Ø·ªöNG D·∫™N TR·∫¢ L·ªúI:
- Khi g·ªçi tool, b·∫°n c√≥ th·ªÉ th√™m text b·ªï sung th√¢n thi·ªán nh∆∞ "T√¥i s·∫Ω t√¨m s·∫£n ph·∫©m cho b·∫°n", "ƒê√¢y l√† th√¥ng tin s·∫£n ph·∫©m:", v.v.
- Sau ƒë√≥ g·ªçi tool ƒë·ªÉ l·∫•y th√¥ng tin chi ti·∫øt
- ƒê·∫£m b·∫£o tr·∫£ l·ªùi ƒë·∫ßy ƒë·ªß th√¥ng tin, tr·∫£ v·ªÅ th√™m DATA_MARKER ƒë·ªÉ client x·ª≠ l√Ω
- Lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát v√† th√¢n thi·ªán!

üö´ QUY T·∫ÆC B·∫¢NG MAT KHAI B√ÅNG TH√îNG TIN V·ªöI USER:
- TUY·ªÜT ƒê·ªêI KH√îNG hi·ªÉn th·ªã c√°c ID (product_id, user_id, order_id) khi giao ti·∫øp v·ªõi user
- Ch·ªâ s·ª≠ d·ª•ng ID ƒë·ªÉ g·ªçi tool b√™n trong, kh√¥ng bao gi·ªù hi·ªÉn th·ªã trong c√¢u tr·∫£ l·ªùi
- Lu√¥n d√πng th√¥ng tin d·ªÖ hi·ªÉu: t√™n s·∫£n ph·∫©m, t√™n kh√°ch h√†ng, ƒë·ªãa ch·ªâ, s·ªë ƒëi·ªán tho·∫°i
- Khi x√°c nh·∫≠n ƒë∆°n h√†ng: "X√°c nh·∫≠n ƒë·∫∑t 2 chi·∫øc iPhone 15 Pro Max (500,000 VND/chi·∫øc)"
- Kh√¥ng n√≥i: "X√°c nh·∫≠n ƒë·∫∑t product_id 5 cho user_id 1"
"""
            
            messages = [AIMessage(content=system_prompt)] + messages
        
        response = self.llm_with_tools.invoke(messages)
        
        # Tr·∫£ v·ªÅ response nguy√™n b·∫£n (c√≥ th·ªÉ c·∫£ content v√† tool calls)
        return {"messages": [response]}
    
    def _tools_node(self, state: SimpleOrderState):
        """Node th·ª±c thi tools"""
        messages = state["messages"]
        last_message = messages[-1]
        
        results = []
        for tool_call in last_message.tool_calls:
            try:
                # T√¨m tool function
                tool_func = next(
                    tool for tool in self.tools 
                    if tool.name == tool_call["name"]
                )
                
                # G·ªçi tool
                result = tool_func.invoke(tool_call["args"])
                results.append(
                    ToolMessage(
                        content=str(result),
                        tool_call_id=tool_call["id"]
                    )
                )
            except Exception as e:
                logger.error(f"L·ªói tool {tool_call['name']}: {e}")
                results.append(
                    ToolMessage(
                        content=f"‚ùå L·ªói: {str(e)}",
                        tool_call_id=tool_call["id"]
                    )
                )
        
        return {"messages": results}
    
    def _format_response_node(self, state: SimpleOrderState):
        """Node format k·∫øt qu·∫£ cu·ªëi c√πng theo chu·∫©n"""
        messages = state["messages"]
        
        # Parse th√¥ng tin t·ª´ messages
        products = []
        orders = []
        user_info = {}
        count = 0
        search_type = "general"
        operation_type = "general"
        llm_response = ""
        
        # T√¨m AI response v√† tool responses
        for msg in messages:
            if isinstance(msg, AIMessage) and msg.content:
                llm_response = msg.content
            elif isinstance(msg, ToolMessage) and msg.content:
                # Parse tool response ƒë·ªÉ t√°ch data
                parsed = parse_agent_response(msg.content)
                if parsed["has_data"] and parsed["data"]:
                    data_type = parsed["data"].get("type")
                    data_content = parsed["data"].get("data")
                    
                    if data_type == "product_detail":
                        products = [data_content]
                        count = 1
                        search_type = "product_detail"
                        operation_type = "find_product"
                    elif data_type == "product_list":
                        products = data_content
                        count = parsed["data"].get("total_count", len(data_content))
                        search_type = "product_search"
                        operation_type = "find_product"
                    elif data_type == "user_info":
                        user_info = data_content
                        count = 1
                        search_type = "user_info"
                        operation_type = "get_user"
                    elif data_type == "order_history":
                        orders = data_content
                        count = len(data_content)
                        search_type = "order_history"
                        operation_type = "get_orders"
                    elif data_type == "order_created":
                        orders = [data_content.get("order", {})]
                        count = 1
                        search_type = "order_created"
                        operation_type = "create_order"
                    elif data_type == "order_updated":
                        orders = [data_content.get("updated_order", {})]
                        count = 1
                        search_type = "order_updated"
                        operation_type = "update_order"
                    elif data_type == "order_info_request":
                        # ƒê√¢y l√† b∆∞·ªõc thu th·∫≠p th√¥ng tin, ch∆∞a t·∫°o ƒë∆°n h√†ng
                        products = data_content.get("products_info", [])
                        count = len(data_content.get("items", []))
                        search_type = "order_info_request"
                        operation_type = "collect_order_info"
        
        # T·∫°o formatted response theo chu·∫©n
        formatted_response = {
            "products": products,
            "orders": orders,
            "user_info": user_info,
            "count": count,
            "llm_response": llm_response,
            "search_type": search_type,
            "operation_type": operation_type
        }
        
        return {
            "products": products,
            "orders": orders,
            "user_info": user_info,
            "count": count,
            "search_type": search_type,
            "operation_type": operation_type,
            "llm_response": llm_response,
            "formatted_response": formatted_response
        }
    
    def _should_use_tools(self, state: SimpleOrderState) -> Literal["tools", "format"]:
        """Quy·∫øt ƒë·ªãnh c√≥ d√πng tools kh√¥ng"""
        messages = state["messages"]
        last_message = messages[-1]
        
        if hasattr(last_message, 'tool_calls') and last_message.tool_calls:
            return "tools"
        return "format"
    
    def chat(self, message: str, user_id: int = 1) -> dict:
        """Chat v·ªõi agent - tr·∫£ v·ªÅ format chu·∫©n"""
        try:
            initial_state = {
                "messages": [HumanMessage(content=message)],
                "current_user_id": user_id,
                "products": [],
                "orders": [],
                "user_info": {},
                "count": 0,
                "search_type": "general",
                "operation_type": "general",
                "llm_response": "",
                "formatted_response": {}
            }
            
            # Ch·∫°y workflow
            result = self.graph.invoke(initial_state)
            
            # Tr·∫£ v·ªÅ formatted response t·ª´ state
            return result.get("formatted_response", {
                "products": [],
                "orders": [],
                "user_info": {},
                "count": 0,
                "llm_response": "Xin l·ªói, t√¥i kh√¥ng hi·ªÉu c√¢u h·ªèi c·ªßa b·∫°n.",
                "search_type": "general",
                "operation_type": "general"
            })
            
        except Exception as e:
            logger.error(f"L·ªói chat: {e}")
            return {
                "products": [],
                "orders": [],
                "user_info": {},
                "count": 0,
                "llm_response": f"‚ùå C√≥ l·ªói x·∫£y ra: {str(e)}",
                "search_type": "error",
                "operation_type": "error"
            }

# ============ INSTANCE CREATOR ============

# Test function
if __name__ == "__main__":
    import os
    from dotenv import load_dotenv
    
    load_dotenv()
    
    agent = SimplifiedOrderAgent()
    
    # Test chat
    print("ü§ñ Simplified Order Agent s·∫µn s√†ng!")
    print("üìù Th·ª≠: 't√¨m s·∫£n ph·∫©m t√™n iphone' ho·∫∑c 'l·∫•y th√¥ng tin user 1'")
    
    while True:
        user_input = input("\nüë§ B·∫°n: ")
        if user_input.lower() in ['quit', 'exit', 'bye']:
            break
        
        response = agent.chat(user_input)
        print(f"ü§ñ Bot Response:")
        print(f"   üìù Text: {response.get('llm_response', 'No response')}")
        print(f"   üìä Type: {response.get('operation_type', 'unknown')}")
        print(f"   üî¢ Count: {response.get('count', 0)}")
        if response.get('products'):
            print(f"   üì¶ Products: {len(response['products'])} items")
        if response.get('orders'):
            print(f"   üõçÔ∏è Orders: {len(response['orders'])} items")
        if response.get('user_info'):
            print(f"   üë§ User Info: Available") 