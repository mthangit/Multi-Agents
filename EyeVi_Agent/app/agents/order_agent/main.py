import logging
import os
import sys
import click
import httpx
import uvicorn

from a2a.server.apps import A2AStarletteApplication
from a2a.server.request_handlers import DefaultRequestHandler
from a2a.server.tasks import InMemoryPushNotifier, InMemoryTaskStore
from a2a.types import (
    AgentCapabilities,
    AgentCard,
    AgentSkill,
)
from dotenv import load_dotenv

from src.a2a_wrapper.agent_executor import OrderAgentExecutor
from src.database import initialize_database_connections

load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class MissingAPIKeyError(Exception):
    """Exception for missing API key."""


@click.command()
@click.option('--host', 'host', default='localhost')
@click.option('--port', 'port', default=10000)
@click.option('--agent-type', 'agent_type',
              type=click.Choice(['simplified', 'simple', 'streaming']), 
              default='simplified',
              help='Lo·∫°i agent s·ª≠ d·ª•ng: simplified (m·ªõi), simple (c≈©), streaming (bot)')
def main(host, port, agent_type):
    """Starts the Order Agent server v·ªõi simplified agent."""
    try:
        # Check API key first
        if not os.getenv('GOOGLE_API_KEY'):
            raise MissingAPIKeyError(
                'GOOGLE_API_KEY environment variable not set.'
            )
            
        # Try to initialize database connections (non-blocking)
        try:
            initialize_database_connections()
            logger.info("‚úÖ Database connections initialized successfully")
        except Exception as db_error:
            logger.warning(f"‚ö†Ô∏è  Database initialization failed (continuing anyway): {db_error}")
            # Continue without database - agent can still work for basic chat

        # Define agent capabilities - h·ªó tr·ª£ streaming v√† push notifications
        capabilities = AgentCapabilities(streaming=False, pushNotifications=True)
        
        # Agent skills - 6 ch·ª©c nƒÉng ch√≠nh t·ª´ SimplifiedOrderAgent
        agent_skills = [
            AgentSkill(
                id='find_product_by_id',
                name='T√¨m s·∫£n ph·∫©m theo ID',
                description='T√¨m ki·∫øm th√¥ng tin chi ti·∫øt s·∫£n ph·∫©m b·∫±ng ID. Hi·ªÉn th·ªã t√™n, gi√°, m√¥ t·∫£ v√† s·ªë l∆∞·ª£ng t·ªìn kho.',
                tags=['search', 'product', 'id', 'lookup'],
                examples=[
                    'T√¨m s·∫£n ph·∫©m ID 123',
                    'Cho t√¥i xem s·∫£n ph·∫©m c√≥ ID 456', 
                    'Th√¥ng tin chi ti·∫øt s·∫£n ph·∫©m s·ªë 789',
                    'S·∫£n ph·∫©m 15 c√≥ g√¨ kh√¥ng?'
                ],
            ),
            AgentSkill(
                id='find_product_by_name',
                name='T√¨m s·∫£n ph·∫©m theo t√™n',
                description='T√¨m ki·∫øm s·∫£n ph·∫©m theo t√™n ho·∫∑c t·ª´ kh√≥a. H·ªó tr·ª£ t√¨m ki·∫øm m·ªù v√† hi·ªÉn th·ªã t·ªëi ƒëa 5 k·∫øt qu·∫£.',
                tags=['search', 'product', 'name', 'keyword', 'fuzzy'],
                examples=[
                    'T√¨m s·∫£n ph·∫©m iPhone',
                    'C√≥ k√≠nh m·∫Øt n√†o kh√¥ng?',
                    'S·∫£n ph·∫©m Samsung',
                    'T√¨m laptop Dell'
                ],
            ),
            AgentSkill(
                id='get_user_info',
                name='Xem th√¥ng tin kh√°ch h√†ng',
                description='L·∫•y th√¥ng tin chi ti·∫øt kh√°ch h√†ng bao g·ªìm t√™n, email, s·ªë ƒëi·ªán tho·∫°i v√† ƒë·ªãa ch·ªâ.',
                tags=['user', 'profile', 'customer', 'info'],
                examples=[
                    'Th√¥ng tin c·ªßa t√¥i',
                    'Xem profile t√¥i',
                    'T√†i kho·∫£n c·ªßa t√¥i nh∆∞ th·∫ø n√†o?',
                    'Th√¥ng tin user 5'
                ],
            ),
            AgentSkill(
                id='get_user_orders', 
                name='Xem l·ªãch s·ª≠ ƒë∆°n h√†ng',
                description='Xem l·ªãch s·ª≠ ƒë∆°n h√†ng c·ªßa kh√°ch h√†ng v·ªõi th√¥ng tin t·ªïng ti·ªÅn, s·ªë s·∫£n ph·∫©m v√† tr·∫°ng th√°i.',
                tags=['order', 'history', 'purchase', 'tracking'],
                examples=[
                    'ƒê∆°n h√†ng c·ªßa t√¥i',
                    'L·ªãch s·ª≠ mua h√†ng',
                    '5 ƒë∆°n h√†ng g·∫ßn nh·∫•t',
                    'Xem ƒë∆°n h√†ng user 10'
                ],
            ),
            AgentSkill(
                id='collect_order_info',
                name='Thu th·∫≠p th√¥ng tin ƒë·∫∑t h√†ng',
                description='Thu th·∫≠p v√† x√°c nh·∫≠n th√¥ng tin s·∫£n ph·∫©m, y√™u c·∫ßu cung c·∫•p ƒë·ªãa ch·ªâ giao h√†ng, s·ªë ƒëi·ªán tho·∫°i v√† h√¨nh th·ª©c thanh to√°n (COD/Banking).',
                tags=['order', 'info', 'collect', 'prepare', 'confirm'],
                examples=[
                    'ƒê·∫∑t 2 s·∫£n ph·∫©m ID 1',
                    'Mua iPhone 2 c√°i',
                    'T√¥i mu·ªën ƒë·∫∑t h√†ng',
                    'ƒê·∫∑t 3 s·∫£n ph·∫©m ID 5'
                ],
            ),
            AgentSkill(
                id='create_order_directly',
                name='T·∫°o ƒë∆°n h√†ng v·ªõi th√¥ng tin ƒë·∫ßy ƒë·ªß',
                description='T·∫°o ƒë∆°n h√†ng cu·ªëi c√πng v·ªõi th√¥ng tin ƒë·∫ßy ƒë·ªß ƒë√£ ƒë∆∞·ª£c thu th·∫≠p (ƒë·ªãa ch·ªâ, SƒêT, payment). Ch·ªâ h·ªó tr·ª£ COD v√† Banking.',
                tags=['order', 'finalize', 'complete', 'create', 'confirm'],
                examples=[
                    'X√°c nh·∫≠n ƒë·∫∑t h√†ng v·ªõi ƒë·ªãa ch·ªâ v√† SƒêT',
                    'Ho√†n t·∫•t ƒë∆°n h√†ng thanh to√°n COD',
                    'T·∫°o ƒë∆°n v·ªõi th√¥ng tin giao h√†ng',
                    'X·ª≠ l√Ω ƒë∆°n h√†ng cu·ªëi c√πng'
                ],
            )
        ]

        # Create agent card v·ªõi th√¥ng tin chi ti·∫øt
        agent_description = {
            'simplified': 'Tr·ª£ l√Ω qu·∫£n l√Ω ƒë∆°n h√†ng th√¥ng minh v·ªõi LangGraph v√† Gemini AI. H·ªó tr·ª£ t√¨m ki·∫øm s·∫£n ph·∫©m, qu·∫£n l√Ω th√¥ng tin kh√°ch h√†ng, xem l·ªãch s·ª≠ ƒë∆°n h√†ng v√† t·∫°o ƒë∆°n h√†ng m·ªõi v·ªõi thu th·∫≠p th√¥ng tin ƒë·∫ßy ƒë·ªß (ƒë·ªãa ch·ªâ, SƒêT, thanh to√°n COD/Banking).',
            'simple': 'Tr·ª£ l√Ω ƒë∆°n h√†ng v·ªõi Simple LangGraph Agent',
            'streaming': 'Tr·ª£ l√Ω ƒë∆°n h√†ng v·ªõi Streaming Bot'
        }
        
        agent_card = AgentCard(
            name='Order Agent',
            description=agent_description[agent_type],
            url=f'http://{host}:{port}/',
            version='2.1.0',  # Version c·∫≠p nh·∫≠t m·ªõi
            defaultInputModes=['text/plain'],
            defaultOutputModes=['text/plain', 'application/json'],
            capabilities=capabilities,
            skills=agent_skills,
        )

        # Initialize HTTP client and components
        httpx_client = httpx.AsyncClient()
        request_handler = DefaultRequestHandler(
            agent_executor=OrderAgentExecutor(agent_type=agent_type),
            task_store=InMemoryTaskStore(),
            push_notifier=InMemoryPushNotifier(httpx_client),
        )

        # Create and run server
        server = A2AStarletteApplication(
            agent_card=agent_card,
            http_handler=request_handler
        )

        logger.info(f"üöÄ Starting EyeVi Order Management Agent server")
        logger.info(f"   üåê Host: {host}:{port}")
        logger.info(f"   ü§ñ Agent Type: {agent_type.upper()}")
        logger.info(f"   üìã Agent Card: http://{host}:{port}/.well-known/agent.json")
        logger.info(f"   üîó A2A Endpoint: http://{host}:{port}/")
        logger.info(f"   ‚ö° Capabilities: 6 skills, database integration")
        logger.info(f"   üß† AI Model: Gemini 2.0 Flash")
        logger.info(f"üí¨ EyeVi Order Agent is ready!")
        
        uvicorn.run(server.build(), host=host, port=port)

    except MissingAPIKeyError as e:
        logger.error(f'‚ùå API Key Error: {e}')
        logger.info('üí° Please set GOOGLE_API_KEY in your .env file')
        sys.exit(1)
    except Exception as e:
        logger.error(f'‚ùå Server startup error: {e}')
        sys.exit(1)


if __name__ == '__main__':
    main()