#!/usr/bin/env python3
"""
A2A Main Server cho Advisor Agent (RAG-based Eyewear Consultation)
"""

import logging
import os
import sys
from pathlib import Path

import click
import httpx
import uvicorn

from a2a.server.apps import A2AStarletteApplication
from a2a.server.request_handlers import DefaultRequestHandler
from a2a.server.tasks import InMemoryPushNotifier, InMemoryTaskStore
from a2a.types import (
    AgentCapabilities,
    AgentCard,
    AgentSkill,
)
from dotenv import load_dotenv

from a2a_wrapper.a2a_agent_executor import AdvisorAgentExecutor

# Load environment variables
load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class MissingAPIKeyError(Exception):
    """Exception for missing API key."""


class MissingDataError(Exception):
    """Exception for missing data/database."""


def check_prerequisites():
    """Check if all prerequisites are met for the advisor agent."""
    # Check API key
    if not os.getenv('GOOGLE_API_KEY'):
        raise MissingAPIKeyError(
            'GOOGLE_API_KEY environment variable not set. Please set your Google Gemini API key.'
        )
    
    # Check data directory exists
    data_folder = Path("data")
    if not data_folder.exists():
        raise MissingDataError(
            'Data directory not found. Please run data ingestion first: python ingest_data.py'
        )
    
    # Check for PDF files
    import glob
    pdf_files = glob.glob("data/**/*.pdf", recursive=True)
    if not pdf_files:
        raise MissingDataError(
            'No PDF files found in data directory. Please add PDF files and run: python ingest_data.py'
        )
    
    logger.info(f"‚úÖ Prerequisites met: {len(pdf_files)} PDF files found")


@click.command()
@click.option('--host', 'host', default='0.0.0.0', help='Host to bind to')
@click.option('--port', 'port', default=10001, help='Port to bind to')
@click.option('--skip-checks', is_flag=True, help='Skip prerequisite checks')
def main(host, port, skip_checks):
    """Starts the Advisor Agent A2A server."""
    try:
        # Check prerequisites unless skipped
        if not skip_checks:
            try:
                check_prerequisites()
            except (MissingAPIKeyError, MissingDataError) as e:
                logger.warning(f"Prerequisite check failed: {e}")
                logger.info("Starting server anyway, but functionality may be limited")
        
        # Define agent capabilities and skills for eyewear consultation
        capabilities = AgentCapabilities(streaming=True, pushNotifications=True)
        
        # Define advisor agent skills
        advisor_skills = [
            AgentSkill(
                id='eyewear_consultation',
                name='T∆∞ v·∫•n m·∫Øt k√≠nh',
                description='T∆∞ v·∫•n chuy√™n s√¢u v·ªÅ m·∫Øt k√≠nh d·ª±a tr√™n c∆° s·ªü d·ªØ li·ªáu ki·∫øn th·ª©c chuy√™n ng√†nh',
                tags=['eyewear', 'consultation', 'optics', 'vision'],
                examples=[
                    'T√¥i b·ªã c·∫≠n th·ªã 2.5 ƒë·ªô, n√™n ch·ªçn lo·∫°i tr√≤ng k√≠nh n√†o?',
                    'K√≠nh ch·ªëng √°nh s√°ng xanh c√≥ th·ª±c s·ª± hi·ªáu qu·∫£ kh√¥ng?',
                    'Khu√¥n m·∫∑t tr√≤n ph√π h·ª£p v·ªõi ki·ªÉu g·ªçng n√†o?',
                    'So s√°nh tr√≤ng k√≠nh ƒëa tr√≤ng v√† ƒë∆°n tr√≤ng?'
                ],
            ),
            AgentSkill(
                id='product_recommendation',
                name='G·ª£i √Ω s·∫£n ph·∫©m',
                description='ƒê∆∞a ra g·ª£i √Ω s·∫£n ph·∫©m m·∫Øt k√≠nh ph√π h·ª£p v·ªõi nhu c·∫ßu v√† ƒëi·ªÅu ki·ªán c·ª• th·ªÉ',
                tags=['product', 'recommendation', 'personalized'],
                examples=[
                    'T√¥i l√†m vi·ªác nhi·ªÅu v·ªõi m√°y t√≠nh, c·∫ßn lo·∫°i k√≠nh n√†o?',
                    'G·ªçng titan c√≥ ∆∞u ƒëi·ªÉm g√¨ so v·ªõi g·ªçng nh·ª±a?',
                    'K√≠nh photochromic c√≥ ph√π h·ª£p v·ªõi t√¥i kh√¥ng?'
                ],
            ),
            AgentSkill(
                id='technical_advice',
                name='T∆∞ v·∫•n k·ªπ thu·∫≠t',
                description='Gi·∫£i th√≠ch c√°c kh√≠a c·∫°nh k·ªπ thu·∫≠t c·ªßa m·∫Øt k√≠nh v√† quang h·ªçc',
                tags=['technical', 'optics', 'education'],
                examples=[
                    'Ch·ªâ s·ªë kh√∫c x·∫° c·ªßa tr√≤ng k√≠nh ·∫£nh h∆∞·ªüng nh∆∞ th·∫ø n√†o?',
                    'L·ªõp ph·ªß ch·ªëng ph·∫£n x·∫° ho·∫°t ƒë·ªông ra sao?',
                    'T·∫°i sao tr√≤ng k√≠nh m·ªèng l·∫°i ƒë·∫Øt h∆°n?'
                ],
            ),
            AgentSkill(
                id='style_consultation',
                name='T∆∞ v·∫•n phong c√°ch',
                description='T∆∞ v·∫•n v·ªÅ ki·ªÉu d√°ng v√† phong c√°ch m·∫Øt k√≠nh ph√π h·ª£p v·ªõi khu√¥n m·∫∑t',
                tags=['style', 'fashion', 'design'],
                examples=[
                    'Khu√¥n m·∫∑t vu√¥ng n√™n ch·ªçn g·ªçng nh∆∞ th·∫ø n√†o?',
                    'Xu h∆∞·ªõng k√≠nh m·∫Øt nƒÉm 2024 l√† g√¨?',
                    'L√†m sao ƒë·ªÉ ph·ªëi k√≠nh v·ªõi trang ph·ª•c?'
                ],
            )
        ]

        # Create agent card with specialized eyewear consultation info
        agent_card = AgentCard(
            name='Advisor Agent',
            description='Agent t∆∞ v·∫•n chuy√™n s√¢u v·ªÅ m·∫Øt k√≠nh, s·ª≠ d·ª•ng c∆° s·ªü d·ªØ li·ªáu ki·∫øn th·ª©c chuy√™n ng√†nh ƒë·ªÉ ƒë∆∞a ra l·ªùi khuy√™n ch√≠nh x√°c v√† h·ªØu √≠ch v·ªÅ c√°c v·∫•n ƒë·ªÅ li√™n quan ƒë·∫øn m·∫Øt k√≠nh, quang h·ªçc v√† th·ªã l·ª±c',
            url=f'http://{host}:{port}/',
            version='1.0.0',
            defaultInputModes=['text/plain'],
            defaultOutputModes=['text/plain'],
            capabilities=capabilities,
            skills=advisor_skills,
        )

        # Initialize HTTP client and components
        httpx_client = httpx.AsyncClient()
        request_handler = DefaultRequestHandler(
            agent_executor=AdvisorAgentExecutor(),
            task_store=InMemoryTaskStore(),
            push_notifier=InMemoryPushNotifier(httpx_client),
        )

        # Create and run server
        server = A2AStarletteApplication(
            agent_card=agent_card,
            http_handler=request_handler
        )

        logger.info(f"üöÄ Starting Advisor Agent A2A server on {host}:{port}")
        logger.info(f"üìã Agent Card: http://{host}:{port}/.well-known/agent.json")
        logger.info(f"üîó A2A Endpoint: http://{host}:{port}/")
        logger.info(f"üí¨ Ready for eyewear consultation queries!")
        
        uvicorn.run(server.build(), host=host, port=port)

    except MissingAPIKeyError as e:
        logger.error(f'‚ùå API Key Error: {e}')
        logger.info('üí° Please set GOOGLE_API_KEY in your .env file')
        sys.exit(1)
    except MissingDataError as e:
        logger.error(f'‚ùå Data Error: {e}')
        logger.info('üí° Please run: python ingest_data.py')
        sys.exit(1)
    except Exception as e:
        logger.error(f'‚ùå Server startup error: {e}')
        sys.exit(1)


if __name__ == '__main__':
    main()
