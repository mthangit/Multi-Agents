"""
Host Agent - FastAPI Server
Orchestrator agent ƒë·ªÉ ƒëi·ªÅu ph·ªëi message t·ªõi c√°c agent kh√°c
"""

from fastapi import FastAPI, HTTPException, File, UploadFile, Form
from pydantic import BaseModel
from typing import Optional, Dict, Any, List
import asyncio
import os
import logging
import base64
from datetime import datetime

# Import c√°c modules local
from server.host_server import HostServer
from server.a2a_client_manager import FileInfo
from db_connector import db_connector


import dotenv
dotenv.load_dotenv()

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Kh·ªüi t·∫°o FastAPI app
app = FastAPI(
    title="Host Agent API",
    description="Orchestrator agent ƒë·ªÉ ƒëi·ªÅu ph·ªëi message t·ªõi c√°c agent kh√°c",
    version="1.0.0"
)

# Kh·ªüi t·∫°o host server
host_server = HostServer()

# Models cho request/response
class ChatResponse(BaseModel):
    response: str
    agent_used: Optional[str] = None
    session_id: Optional[str] = None
    clarified_message: Optional[str] = None
    analysis: Optional[str] = None
    data: Optional[list] = None
    user_info: Optional[dict] = None
    orders: Optional[list] = None
    status: str = "success"
    timestamp: str
    extracted_product_ids: Optional[List[str]] = None

class HealthResponse(BaseModel):
    status: str
    message: str
    timestamp: str

class ProductResponse(BaseModel):
    id: str
    name: str
    description: Optional[str] = None
    brand: Optional[str] = None
    category: Optional[str] = None
    gender: Optional[str] = None
    weight: Optional[float] = None
    quantity: Optional[int] = None
    rating: Optional[float] = None
    newPrice: Optional[float] = None
    trending: Optional[bool] = None
    frameMaterial: Optional[str] = None
    lensMaterial: Optional[str] = None
    lensFeatures: Optional[str] = None
    frameShape: Optional[str] = None
    lensWidth: Optional[float] = None
    bridgeWidth: Optional[float] = None
    templeLength: Optional[float] = None
    color: Optional[str] = None
    availability: Optional[bool] = None
    price: Optional[float] = None
    image_url: Optional[str] = None
    stock: Optional[int] = None

@app.on_event("startup")
async def startup_event():
    """Kh·ªüi t·∫°o khi server start"""
    logger.info("üöÄ Host Agent Server ƒëang kh·ªüi ƒë·ªông...")
    await host_server.initialize()
    logger.info("‚úÖ Host Agent Server ƒë√£ s·∫µn s√†ng!")

@app.on_event("shutdown")
async def shutdown_event():
    """Cleanup khi server shutdown"""
    logger.info("üîÑ Host Agent Server ƒëang shutdown...")
    await host_server.cleanup()
    # ƒê√≥ng k·∫øt n·ªëi database
    db_connector.close()
    logger.info("‚úÖ Host Agent Server ƒë√£ shutdown th√†nh c√¥ng!")

@app.get("/", response_model=HealthResponse)
async def root():
    """Health check endpoint"""
    return HealthResponse(
        status="healthy",
        message="Host Agent Server ƒëang ho·∫°t ƒë·ªông t·ªët!",
        timestamp=datetime.now().isoformat()
    )

@app.get("/health", response_model=HealthResponse)
async def health():
    """Detailed health check"""
    try:
        # Ki·ªÉm tra tr·∫°ng th√°i c√°c agent connections
        agent_status = await host_server.check_agents_health()
        
        return HealthResponse(
            status="healthy",
            message=f"T·∫•t c·∫£ services ho·∫°t ƒë·ªông t·ªët. Agents: {agent_status}",
            timestamp=datetime.now().isoformat()
        )
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        raise HTTPException(status_code=500, detail=f"Health check failed: {str(e)}")

@app.post("/chat", response_model=ChatResponse)
async def chat(
    message: str = Form(...),
    user_id: Optional[str] = Form(None),
    session_id: Optional[str] = Form(None),
    files: List[UploadFile] = File(None)
):
    """
    Main endpoint ƒë·ªÉ nh·∫≠n message t·ª´ user v√† ƒëi·ªÅu ph·ªëi t·ªõi agent ph√π h·ª£p
    C√≥ th·ªÉ k√®m theo files (·∫£nh, document) ho·∫∑c kh√¥ng
    """
    try:
        logger.info(f"üì® Nh·∫≠n message t·ª´ user: {message[:100]}...")
        
        # T·ª± ƒë·ªông t·∫°o session ID n·∫øu kh√¥ng c√≥
        if not session_id:
            from uuid import uuid4
            session_id = str(uuid4())
            logger.info(f"üÜî T·∫°o session ID m·ªõi: {session_id}")
        
        # X·ª≠ l√Ω files n·∫øu c√≥
        processed_files = None
        if files and any(file.filename for file in files):
            processed_files = []
            for file in files:
                if file.filename:  # Ki·ªÉm tra file c√≥ t·ªìn t·∫°i
                    # ƒê·ªçc file content
                    file_content = await file.read()
                    
                    # Encode th√†nh base64
                    file_base64 = base64.b64encode(file_content).decode('utf-8')
                    
                    # X√°c ƒë·ªãnh mime type
                    mime_type = file.content_type or "application/octet-stream"
                    
                    processed_files.append(FileInfo(
                        name=file.filename,
                        mime_type=mime_type,
                        data=file_base64
                    ))
                    
                    logger.info(f"üìé Processed file: {file.filename} ({mime_type}, {len(file_content)} bytes)")
        
        # X·ª≠ l√Ω message th√¥ng qua host server
        if processed_files:
            # C√≥ files ƒë√≠nh k√®m
            result = await host_server.process_message_with_files(
                message=message,
                user_id=user_id,
                session_id=session_id,
                files=processed_files
            )
        else:
            # Ch·ªâ c√≥ text
            result = await host_server.process_message(
                message=message,
                user_id=user_id,
                session_id=session_id
            )
        
        logger.info(f"‚úÖ X·ª≠ l√Ω th√†nh c√¥ng, agent ƒë∆∞·ª£c s·ª≠ d·ª•ng: {result.get('agent_used', 'None')}")
        
        return ChatResponse(
            response=result["response"],
            agent_used=result.get("agent_used"),
            session_id=result.get("session_id"),
            clarified_message=result.get("clarified_message"),
            analysis=result.get("analysis"),
            data=result.get("data"),
            user_info=result.get("user_info"),
            orders=result.get("orders"),
            status="success",
            timestamp=datetime.now().isoformat(),
            extracted_product_ids=result.get("extracted_product_ids")
        )
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi x·ª≠ l√Ω message: {e}")
        raise HTTPException(
            status_code=500, 
            detail=f"L·ªói khi x·ª≠ l√Ω message: {str(e)}"
        )

@app.get("/products/{product_id}", response_model=Optional[ProductResponse])
async def get_product(product_id: str):
    """
    L·∫•y th√¥ng tin s·∫£n ph·∫©m theo ID
    """
    try:
        logger.info(f"üîç ƒêang t√¨m s·∫£n ph·∫©m v·ªõi ID: {product_id}")
        product = db_connector.get_product_by_id(product_id)
        
        if not product:
            logger.warning(f"‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID: {product_id}")
            raise HTTPException(status_code=404, detail=f"Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID: {product_id}")
        
        logger.info(f"‚úÖ ƒê√£ t√¨m th·∫•y s·∫£n ph·∫©m: {product.get('name', 'Unknown')}")
        return product
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi l·∫•y th√¥ng tin s·∫£n ph·∫©m: {e}")
        raise HTTPException(status_code=500, detail=f"L·ªói khi l·∫•y th√¥ng tin s·∫£n ph·∫©m: {str(e)}")

@app.get("/products", response_model=List[ProductResponse])
async def get_products_by_ids(product_ids: str):
    """
    L·∫•y th√¥ng tin nhi·ªÅu s·∫£n ph·∫©m theo danh s√°ch ID
    
    Query param: product_ids - Danh s√°ch ID s·∫£n ph·∫©m, ph√¢n c√°ch b·ªüi d·∫•u ph·∫©y
    Example: /products?product_ids=1,2,3
    """
    try:
        id_list = [id.strip() for id in product_ids.split(",")]
        logger.info(f"üîç ƒêang t√¨m {len(id_list)} s·∫£n ph·∫©m")
        
        products = db_connector.get_products_by_ids(id_list)
        
        if not products:
            logger.warning(f"‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o")
            return []
        
        logger.info(f"‚úÖ ƒê√£ t√¨m th·∫•y {len(products)} s·∫£n ph·∫©m")
        return products
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi l·∫•y th√¥ng tin s·∫£n ph·∫©m: {e}")
        raise HTTPException(status_code=500, detail=f"L·ªói khi l·∫•y th√¥ng tin s·∫£n ph·∫©m: {str(e)}")

@app.get("/agents/status")
async def get_agents_status():
    """Ki·ªÉm tra tr·∫°ng th√°i t·∫•t c·∫£ agents"""
    try:
        status = await host_server.get_all_agents_status()
        return {
            "status": "success",
            "agents": status,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        logger.error(f"Failed to get agents status: {e}")
        raise HTTPException(status_code=500, detail=str(e))



@app.get("/sessions/{session_id}/history")
async def get_chat_history(session_id: str, user_id: Optional[str] = None):
    """L·∫•y l·ªãch s·ª≠ chat cho session"""
    try:
        if user_id:
            messages = await host_server.get_chat_history(user_id, session_id)
        else:
            messages = host_server.get_chat_history_fallback(session_id)
        
        if not messages:
            return {
                "status": "success",
                "session_id": session_id,
                "user_id": user_id,
                "messages": [],
                "message": "Kh√¥ng c√≥ l·ªãch s·ª≠ chat cho session n√†y",
                "total_messages": 0
            }
        
        # L·∫•y 50 tin nh·∫Øn g·∫ßn ƒë√¢y nh·∫•t
        recent_messages = messages[-50:] if len(messages) > 50 else messages
        
        return {
            "status": "success",
            "session_id": session_id,
            "user_id": user_id,
            "messages": recent_messages,
            "total_messages": len(messages),
            "returned_messages": len(recent_messages)
        }
        
    except Exception as e:
        logger.error(f"Failed to get chat history for session {session_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.delete("/sessions/{session_id}/history")
async def clear_chat_history(session_id: str, user_id: Optional[str] = None):
    """X√≥a l·ªãch s·ª≠ chat cho session"""
    try:
        if user_id:
            await host_server.clear_chat_history(user_id, session_id)
        else:
            host_server.clear_chat_history_fallback(session_id)
        
        return {
            "status": "success",
            "session_id": session_id,
            "user_id": user_id,
            "message": "ƒê√£ x√≥a l·ªãch s·ª≠ chat th√†nh c√¥ng",
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"Failed to clear chat history for session {session_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/sessions/create")
async def create_new_session():
    """T·∫°o session ID m·ªõi"""
    try:
        # Import uuid ƒë·ªÉ t·∫°o session ID
        from uuid import uuid4
        
        # T·∫°o session ID m·ªõi
        new_session_id = str(uuid4())
        
        # Kh·ªüi t·∫°o chat history cho session m·ªõi
        host_server.a2a_client_manager._ensure_chat_history(new_session_id)
        
        logger.info(f"‚úÖ ƒê√£ t·∫°o session m·ªõi: {new_session_id}")
        
        return {
            "status": "success",
            "session_id": new_session_id,
            "message": "Session m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng",
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"Failed to create new session: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/sessions")
async def list_active_sessions():
    """Li·ªát k√™ c√°c session ƒëang active"""
    try:
        # L·∫•y t·∫•t c·∫£ chat histories t·ª´ A2A client manager
        sessions_info = []
        
        for session_id, chat_history in host_server.a2a_client_manager.chat_histories.items():
            sessions_info.append({
                "session_id": session_id,
                "created_at": chat_history.created_at.isoformat(),
                "last_updated": chat_history.last_updated.isoformat(),
                "message_count": len(chat_history.messages),
                "last_message_preview": chat_history.messages[-1]["content"][:100] + "..." if chat_history.messages else ""
            })
        
        return {
            "status": "success",
            "active_sessions": len(sessions_info),
            "sessions": sessions_info,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"Failed to list active sessions: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/users/{user_id}/sessions")
async def get_user_sessions(user_id: str):
    """L·∫•y danh s√°ch t·∫•t c·∫£ sessions c·ªßa user"""
    try:
        sessions = await host_server.get_user_sessions(user_id)
        
        # L·∫•y th√¥ng tin chi ti·∫øt cho t·ª´ng session
        sessions_info = []
        for session_id in sessions:
            try:
                chat_history = await host_server.get_chat_history(user_id, session_id)
                if chat_history:
                    sessions_info.append({
                        "session_id": session_id,
                        "created_at": chat_history.created_at.isoformat(),
                        "last_updated": chat_history.last_updated.isoformat(),
                        "message_count": len(chat_history.messages),
                        "last_message_preview": chat_history.messages[-1]["content"][:100] + "..." if chat_history.messages else ""
                    })
            except Exception as e:
                logger.warning(f"Cannot get details for session {session_id}: {e}")
                sessions_info.append({
                    "session_id": session_id,
                    "error": "Cannot retrieve details"
                })
        
        return {
            "status": "success",
            "user_id": user_id,
            "total_sessions": len(sessions_info),
            "sessions": sessions_info,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"Failed to get user sessions for {user_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == "__main__":
    import uvicorn
    
    # L·∫•y config t·ª´ environment variables
    host = os.getenv("HOST", "0.0.0.0")
    port = int(os.getenv("PORT", "8000"))
    
    logger.info(f"üöÄ Kh·ªüi ƒë·ªông Host Agent Server t·∫°i {host}:{port}")
    
    uvicorn.run(
        "main:app",
        host=host,
        port=port,
        reload=True,
        log_level="info"
    )
